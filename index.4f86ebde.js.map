{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,AAFa,SAAS,aAAa,CAAC,SAE/B,gBAAgB,CAAC,QAAS,SAAC,CAAhC,EACE,GAAI,AAAqB,OAArB,EAAE,MAAM,CAAC,OAAO,EAIpB,I,EAAM,EAAO,SAAS,aAAa,CAAC,SAC9B,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAW,EAAK,IAAI,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IACpB,EAAY,EAAE,MAAM,CAAC,SAAS,CAKpC,OAFa,AAAC,MAAM,AADF,CAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAU,CAAC,WAAW,CAAC,IAAI,GAC7B,OAAO,CAAC,OAAQ,KAAkB,SAAX,UAGnD,IAAK,SACH,EAAK,IAAI,CAAC,SAAC,CAAA,CAAM,CAAjB,EAQE,OAAO,AAPO,WACZ,EAAK,KAAK,CAAC,EAAU,CAAC,WAAW,CAAC,OAAO,CAAC,aAAc,KAE5C,WACZ,EAAK,KAAK,CAAC,EAAU,CAAC,WAAW,CAAC,OAAO,CAAC,aAAc,IAI5D,GACA,KAEF,KAAK,SACH,EAAK,IAAI,CAAC,SAAC,CAAA,CAAM,CAAjB,EACE,IAAM,EAAQ,EAAK,KAAK,CAAC,EAAU,CAAC,WAAW,CAAC,IAAI,GAC9C,EAAQ,EAAK,KAAK,CAAC,EAAU,CAAC,WAAW,CAAC,IAAI,GAEpD,OAAO,EAAM,aAAa,CAAC,EAC7B,EAEJ,CAEA,EAAK,OAAO,CAAC,SAAC,CAAd,EAAsB,OAAA,EAAK,WAAW,CAAC,E,GACzC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar grid = document.querySelector(\"table\");\ngrid.addEventListener(\"click\", function(e) {\n    if (e.target.tagName !== \"TH\") return;\n    var body = document.querySelector(\"tbody\");\n    var rows = _to_consumable_array(body.rows);\n    var collIndex = e.target.cellIndex;\n    var firstCell = rows[0].cells[collIndex].textContent.trim();\n    var type = !isNaN(firstCell.replace(/[,]/g, \"\")) ? \"number\" : \"string\";\n    switch(type){\n        case \"number\":\n            rows.sort(function(rowA, rowB) {\n                var cellA = parseFloat(rowA.cells[collIndex].textContent.replace(/[^0-9.-]+/g, \"\"));\n                var cellB = parseFloat(rowB.cells[collIndex].textContent.replace(/[^0-9.-]+/g, \"\"));\n                return cellA - cellB;\n            });\n            break;\n        case \"string\":\n            rows.sort(function(rowA, rowB) {\n                var cellA = rowA.cells[collIndex].textContent.trim();\n                var cellB = rowB.cells[collIndex].textContent.trim();\n                return cellA.localeCompare(cellB);\n            });\n            break;\n    }\n    rows.forEach(function(row) {\n        return body.appendChild(row);\n    });\n});\n\n//# sourceMappingURL=index.4f86ebde.js.map\n","'use strict';\n\nconst grid = document.querySelector('table');\n\ngrid.addEventListener('click', (e) => {\n  if (e.target.tagName !== 'TH') {\n    return;\n  }\n\n  const body = document.querySelector('tbody');\n  const rows = [...body.rows];\n  const collIndex = e.target.cellIndex;\n\n  const firstCell = rows[0].cells[collIndex].textContent.trim();\n  const type = !isNaN(firstCell.replace(/[,]/g, '')) ? 'number' : 'string';\n\n  switch (type) {\n    case 'number':\n      rows.sort((rowA, rowB) => {\n        const cellA = parseFloat(\n          rowA.cells[collIndex].textContent.replace(/[^0-9.-]+/g, ''),\n        );\n        const cellB = parseFloat(\n          rowB.cells[collIndex].textContent.replace(/[^0-9.-]+/g, ''),\n        );\n\n        return cellA - cellB;\n      });\n      break;\n\n    case 'string':\n      rows.sort((rowA, rowB) => {\n        const cellA = rowA.cells[collIndex].textContent.trim();\n        const cellB = rowB.cells[collIndex].textContent.trim();\n\n        return cellA.localeCompare(cellB);\n      });\n      break;\n  }\n\n  rows.forEach((row) => body.appendChild(row));\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","grid","document","querySelector","addEventListener","e","target","tagName","body","rows","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","collIndex","cellIndex","isNaN","firstCell","cells","textContent","trim","replace","sort","rowA","rowB","cellA","parseFloat","cellB","localeCompare","forEach","row","appendChild"],"version":3,"file":"index.4f86ebde.js.map"}